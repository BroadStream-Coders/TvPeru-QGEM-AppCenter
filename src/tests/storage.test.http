### ================================
### GUARDAR JSON EN STORAGE
### ================================

### Caso correcto: guardar archivo en bucket `sample-data`
POST http://localhost:3000/api/sample-data/mi-archivo.json
Content-Type: application/json

{
  "id": 456,
  "title": "Mi documento JSON",
  "data": {
    "usuarios": [
      {"nombre": "Juan", "edad": 30},
      {"nombre": "María", "edad": 25}
    ],
    "configuracion": {
      "tema": "oscuro",
      "idioma": "es"
    }
  },
  "timestamp": "2025-01-15T10:30:00Z",
  "tags": ["importante", "config", "usuarios"]
}

### Caso correcto: guardar archivo en bucket `current-data`
POST http://localhost:3000/api/current-data/configuracion-app.json
Content-Type: application/json

{
  "version": "1.2.3",
  "features": {
    "darkMode": true,
    "notifications": false,
    "autoSave": true
  },
  "limits": {
    "maxFiles": 100,
    "maxSize": "10MB"
  }
}

### Caso de error: falta nombre de archivo
POST http://localhost:3000/api/sample-data/
Content-Type: application/json

{
  "test": "esto debería fallar"
}


### ================================
### OBTENER JSON DESDE STORAGE
### ================================

### Caso correcto: obtener archivo existente
GET http://localhost:3000/api/current-data/DeletreoData.json

### Caso correcto: obtener otro archivo
GET http://localhost:3000/api/sample-data/mi-archivo.json

### Caso de error: archivo no existe
GET http://localhost:3000/api/current-data/archivo-que-no-existe.json

### Caso de error: bucket inexistente
GET http://localhost:3000/api/bucket-falso/mi-archivo.json


### ================================
### LISTAR CONTENIDO DE UN BUCKET
### ================================

### Caso correcto: listar contenido de bucket `current-data`
GET http://localhost:3000/api/current-data

### Caso correcto: listar contenido de bucket `sample-data`
GET http://localhost:3000/api/sample-data

### Caso correcto: listar contenido de bucket `json-files`
GET http://localhost:3000/api/json-files

### Caso con parámetros extra (path, limit, orden)
GET http://localhost:3000/api/current-data?path=PersonajesData&limit=5&sortBy=updated_at&sortOrder=desc

### Caso de error: bucket inexistente
GET http://localhost:3000/api/bucket-falso/listContent
